_PRINTF(3)                 Library Functions Manual                 _PRINTF(3)

NAME
     _printf â€“ custom formatted output conversion

SYNOPSIS
     #include <stdarg.h>

     int _printf(const char *format, ...);

DESCRIPTION
     The `_printf()` function writes output to `stdout` under the control of a
     format string that specifies how subsequent arguments are converted for
     output.

     The format string is composed of zero or more directives: ordinary
     characters (except `%`), which are copied unchanged to the output stream;
     and conversion specifications, each of which results in fetching zero or
     more subsequent arguments.

     The conversion specifications supported by `_printf()` are:

     **Conversion Specifiers:**

     - **%c**
       Prints a single character.

     - **%s**
       Prints a string of characters.

     - **%d, %i**
       Prints a signed decimal integer. Handles negative numbers by printing a
       leading minus sign and converting the number to positive for processing.

     - **%%**
       Prints a literal `%` character.

     **Note:** The `_printf()` function does not support flags, field width,
     precision, or length modifiers. It only handles the basic conversion
     specifiers listed above.

RETURN VALUE
     Upon successful completion, `_printf()` returns the number of characters
     printed (excluding the null byte used to end output to strings). If an
     output error is encountered, a negative value is returned.

EXAMPLES
     **Example 1: Printing characters and strings**

     ```c
     _printf("Character: %c\n", 'A');
     _printf("String: %s\n", "Hello, World!");
     ```

     **Example 2: Printing integers**

     ```c
     _printf("Signed integer: %d\n", -12345);
     _printf("Another integer: %i\n", 67890);
     ```

     **Example 3: Printing a percent sign**

     ```c
     _printf("Percent sign: %%\n");
     ```

NOTES
     - The `_printf()` function is a simplified version of the standard
       `printf()` function and is designed for basic formatted output.
     - It does not handle floating-point numbers (`%f`, `%e`, `%g`), unsigned
       integers (`%u`), octal numbers (`%o`), hexadecimal numbers (`%x`, `%X`),
       or pointer addresses (`%p`).
     - Since it does not support field width or precision, it cannot format
       numbers with leading zeros, spaces, or align text within a specified
       width.

SEE ALSO
     `printf(3)`, `putchar(3)`, `puts(3)`, `vprintf(3)`

AUTHORS
     Carlos Valentin
     Adolfo Rodriguez
